package de.hrw.dsalab.distsys.chat.data;

import com.google.gson.Gson;
import lombok.Getter;
import lombok.Setter;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlRootElement;
import java.io.Serializable;
import java.util.Objects;
import java.util.UUID;

/**
 * This container is used to describe a user.<br>
 * A user contains a username and an uid, the uid is automatically generated by the provided username.<br>
 * If an empty username is provided a generated one will be used.
 * @author Nils Milewski
 * @version 1.7.2
 * @since 1.0
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlRootElement(name = "user")
public class User implements Serializable {
    /**
     * Represents the System user
     */
    private static final transient String SYSTEM_UID = "7a88108c-9596-4676-b4f1-bb941418bd9a";

    /**
     * Specifies the username
     */
    @Getter @Setter
    private String nick = null;

    /**
     * Specified the {@link UUID UID} of the user
     */
    @Getter @Setter
    private UUID uid = null;

    /**
     * Build a user object with a specified nickname<br>
     * The {@link User#uid} is automatically generated via the {@link UUID} class.<br>
     * <b>NOTE</b> If <i>system</i> is provided as nick the actual username is set to an <i>UnknownUser#{1000-9999}</i>
     * @param nick Nickname which should be user
     * @return new {@link User user} object
     */
    public static User build(String nick){
        User user = new User();
        if(nick.equalsIgnoreCase("system")){
            user.nick = "UnknownUser#" + Math.floor((Math.random() * (9999 - 1000 + 1) + 1000));
        }else {
            user.nick = nick;
            user.uid = UUID.randomUUID();
        }return user;
    }

    /**
     * Tests if a given user is a system user.<br>
     * @param user User to validate
     * @return True iff the uid of the user equals the system user uid
     */
    public static boolean isSystem(User user){
        return UUID.fromString(SYSTEM_UID).equals(user.uid);
    }

    /**
     * Request the system uid
     * @return Uid from the system user
     */
    public static String getSystemUid() {
        return SYSTEM_UID;
    }

    /**
     * Constructs a new user object, set its {@link User#nick nick} to system and the {@link User#uid uid} to {@link User#SYSTEM_UID}
     * @return new System user object
     */
    public static User getSystemUser(){
        User user = new User();
        user.nick = "System";
        user.uid = UUID.fromString(SYSTEM_UID);
        return user;
    }

    /**
     * This method verifies that another user object is the same as the current one.<br>
     * It utilizes the {@link UUID#equals} method
     * @param another Another object to check against
     * @return True iff the {@link User#uid} are equal
     */
    @Override
    public boolean equals(Object another) {
        if (!(another instanceof User)) {
            return false;
        }
        User user = (User) another;
        if(null == user.uid || null == this.uid){
            return false;
        }
        return uid.equals(user.uid);
    }

    /**
     * Utilizes the {@link Gson#toJson} method to create a json representation of the object
     * @return Json String representation
     */
    @Override
    public String toString() {
        return new Gson().toJson(this);
    }

    /**
     * Calls {@link Objects#hash}
     * @return {@link Objects#hash}
     */
    @Override
    public int hashCode() {
        return Objects.hash(nick, uid);
    }
}
